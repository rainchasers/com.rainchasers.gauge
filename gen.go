// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates rivers.go. It can be invoked by running
// go generate
package main

import (
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"text/template"
	"time"

	"github.com/rainchasers/content/internal/river"
	"gopkg.in/yaml.v2"
)

func main() {
	files, err := filepath.Glob("./rivers/*.yaml")
	die(err)

	var rivers []river.Section
	for _, fn := range files {
		y, err := ioutil.ReadFile(fn)
		die(err)

		var r river.Section
		err = yaml.Unmarshal(y, &r)
		die(err)

		rivers = append(rivers, r)
	}

	f, err := os.Create("rivers.go")
	die(err)
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		Rivers    []river.Section
	}{
		Timestamp: time.Now(),
		Rivers:    rivers,
	})
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
// using data from /rivers content directory
package content

import "github.com/rainchasers/content/internal/river"

var Sections = []river.Section{
{{- range .Rivers }}
	{{ printf "%#v" . }},
{{- end }}
}
`))
