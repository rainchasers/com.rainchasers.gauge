// Code generated by gopkg.in/actgardner/gogen-avro.v5. DO NOT EDIT.
/*
 * SOURCE:
 *     gauge.avsc
 */

package avro

import (
	"io"
)

type Snapshot struct {
	Data_url        string
	Human_url       string
	Name            string
	River_name      string
	Lat             float32
	Lg              float32
	Unit            string
	Type            TypeValues
	Readings        []*Measure
	Processing_time int64
}

func DeserializeSnapshot(r io.Reader) (*Snapshot, error) {
	return readSnapshot(r)
}

func NewSnapshot() *Snapshot {
	v := &Snapshot{
		Readings: make([]*Measure, 0),
	}

	return v
}

func (r *Snapshot) Schema() string {
	return "{\"doc:\":\"Gauge measurement record information and reading snapshot\",\"fields\":[{\"doc\":\"Data URL for the gauge measurement\",\"name\":\"data_url\",\"type\":\"string\"},{\"doc\":\"Human linkable URL for the station\",\"name\":\"human_url\",\"type\":\"string\"},{\"doc\":\"Human-readable name of the measurement\",\"name\":\"name\",\"type\":\"string\"},{\"doc\":\"Name of the river measured\",\"name\":\"river_name\",\"type\":\"string\"},{\"doc\":\"Location latitude\",\"name\":\"lat\",\"type\":\"float\"},{\"doc\":\"Location longitude\",\"name\":\"lg\",\"type\":\"float\"},{\"doc\":\"Measurement unit\",\"name\":\"unit\",\"type\":\"string\"},{\"doc\":\"Measurement type\",\"name\":\"type\",\"type\":{\"name\":\"typeValues\",\"symbols\":[\"level\",\"flow\",\"temperature\",\"rainfall\"],\"type\":\"enum\"}},{\"name\":\"readings\",\"type\":{\"items\":{\"doc:\":\"Gauge measurement information\",\"fields\":[{\"doc\":\"Unix epoch time in seconds for measurement event time\",\"name\":\"event_time\",\"type\":\"long\"},{\"doc\":\"Measurement value\",\"name\":\"value\",\"type\":\"float\"}],\"name\":\"measure\",\"namespace\":\"com.rainchasers.gauge\",\"type\":\"record\"},\"type\":\"array\"}},{\"doc\":\"Unix epoch time in seconds for measurement processing time\",\"name\":\"processing_time\",\"type\":\"long\"}],\"name\":\"snapshot\",\"namespace\":\"com.rainchasers.gauge\",\"type\":\"record\"}"
}

func (r *Snapshot) Serialize(w io.Writer) error {
	return writeSnapshot(r, w)
}
